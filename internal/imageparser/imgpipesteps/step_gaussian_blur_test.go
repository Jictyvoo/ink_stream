package imgpipesteps

import (
	_ "embed"
	"image"
	"testing"

	"github.com/Jictyvoo/ink_stream/internal/imageparser"
	"github.com/Jictyvoo/ink_stream/pkg/imgutils"
)

func TestStepApplyGaussianBlurImage_PerformExec(t *testing.T) {
	inputImg := &image.RGBA{
		Pix: []uint8{
			0x81, 0x70, 0xcb, 0x3c, 0x18, 0x5a, 0x67, 0x8e, 0x31, 0xc6, 0x1, 0xfd, 0x53, 0x9b, 0x64, 0x8e, 0x1,
			0x1f, 0x63, 0xdd, 0x55, 0xab, 0x3c, 0x61, 0x86, 0xf, 0xa6, 0x26, 0xcb, 0x27, 0xb4, 0xeb, 0x73, 0x35,
			0xec, 0xa1, 0x10, 0x91, 0xc, 0xf, 0x1d, 0x1a, 0xeb, 0x27, 0xfb, 0xd1, 0xda, 0xfb, 0x6e, 0xdd, 0xe9,
			0xc6, 0xb1, 0x69, 0x8c, 0xf6, 0xdb, 0x9e, 0x6d, 0xc9, 0xe, 0xc2, 0x92, 0xb4,
		},
		Stride: 16, Rect: image.Rectangle{Min: image.Point{X: 0, Y: 0}, Max: image.Point{X: 4, Y: 4}},
	}
	testCases := []struct {
		name                  string
		radius                uint
		inputImg, expectedImg image.Image
	}{
		{
			name:     "Zero radius",
			radius:   0,
			inputImg: inputImg,
			expectedImg: &image.RGBA{
				Pix: []uint8{
					0x81, 0x70, 0xcb, 0x3c, 0x18, 0x5a, 0x67, 0x8e, 0x31, 0xc6, 0x1, 0xfd, 0x53, 0x9b, 0x64, 0x8e, 0x1,
					0x1f, 0x63, 0xdd, 0x55, 0xab, 0x3c, 0x61, 0x86, 0xf, 0xa6, 0x26, 0xcb, 0x27, 0xb4, 0xeb, 0x73, 0x35,
					0xec, 0xa1, 0x10, 0x91, 0xc, 0xf, 0x1d, 0x1a, 0xeb, 0x27, 0xfb, 0xd1, 0xda, 0xfb, 0x6e, 0xdd, 0xe9,
					0xc6, 0xb1, 0x69, 0x8c, 0xf6, 0xdb, 0x9e, 0x6d, 0xc9, 0xe, 0xc2, 0x92, 0xb4,
				},
				Stride: 16,
				Rect:   image.Rectangle{Min: image.Point{X: 0, Y: 0}, Max: image.Point{X: 4, Y: 4}},
			},
		},
		{
			name:     "Blur with radius 3",
			radius:   3,
			inputImg: inputImg,
			expectedImg: &image.RGBA{
				Pix: []uint8{
					0x53, 0x70, 0x7c, 0xff, 0x5d, 0x7a, 0x74, 0xff, 0x67, 0x83, 0x71, 0xff, 0x76, 0x86, 0x7a, 0xff,
					0x5d, 0x6f, 0x89, 0xff, 0x6a, 0x78, 0x83, 0xff, 0x76, 0x7f, 0x82, 0xff, 0x85, 0x83, 0x8a, 0xff,
					0x6c, 0x76, 0x99, 0xff, 0x78, 0x7e, 0x91, 0xff, 0x83, 0x86, 0x90, 0xff, 0x8f, 0x8c, 0x96, 0xff,
					0x78, 0x82, 0xa1, 0xff, 0x83, 0x86, 0x98, 0xff, 0x8a, 0x8c, 0x95, 0xff, 0x8f, 0x92, 0x99, 0xff,
				},
				Stride: 16, Rect: image.Rectangle{Min: image.Point{X: 0, Y: 0}, Max: image.Point{X: 4, Y: 4}},
			},
		},
		{
			name:     "Blur with radius 5",
			radius:   5,
			inputImg: inputImg,
			expectedImg: &image.RGBA{
				Pix: []uint8{
					0x64, 0x79, 0x84, 0xff, 0x69, 0x7e, 0x7f, 0xff, 0x6e, 0x83, 0x7d, 0xff, 0x76, 0x84, 0x82, 0xff,
					0x6a, 0x78, 0x8b, 0xff, 0x70, 0x7c, 0x87, 0xff, 0x76, 0x80, 0x86, 0xff, 0x7d, 0x82, 0x8b, 0xff,
					0x72, 0x7d, 0x94, 0xff, 0x78, 0x80, 0x90, 0xff, 0x7d, 0x85, 0x8e, 0xff, 0x83, 0x88, 0x92, 0xff,
					0x77, 0x82, 0x98, 0xff, 0x7c, 0x85, 0x93, 0xff, 0x81, 0x89, 0x91, 0xff, 0x84, 0x8c, 0x94, 0xff,
				},
				Stride: 16,
				Rect:   image.Rectangle{Min: image.Point{X: 0, Y: 0}, Max: image.Point{X: 4, Y: 4}},
			},
		},
	}
	for _, tCase := range testCases {
		t.Run(tCase.name, func(t *testing.T) {
			step := NewStepGaussianBlur(int(tCase.radius))
			var (
				state = imageparser.PipeState{Img: tCase.inputImg}
				opts  imageparser.ProcessOptions
			)

			if err := step.PerformExec(&state, opts); err != nil {
				t.Fatalf("%s: PerformExec: %v", tCase.name, err.Error())
			}

			result := state.Img
			if !imgutils.IsImageEqual(result, tCase.expectedImg) {
				t.Errorf(
					"expected: %#v, actual: %#v", tCase.expectedImg, result,
				)
			}
		})
	}
}
