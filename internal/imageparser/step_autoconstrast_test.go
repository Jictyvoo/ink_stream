package imageparser

import (
	"image"
	"testing"

	"github.com/Jictyvoo/ink_stream/internal/utils/imgutils"
)

func TestStepAutoContrastImage_PerformExec(t *testing.T) {
	testCases := []struct {
		name        string
		inputImg    image.Image
		cutoff      [2]float64
		gamma       float64
		expectedImg image.Image
	}{
		{
			name: "Low gamma, no contrast",
			inputImg: &image.RGBA{
				Pix: []uint8{
					0x62, 0x85, 0x28, 0x88, 0xda, 0xb2, 0xf2, 0x55, 0x1a, 0x5e, 0x61, 0x7f, 0x3b, 0x72, 0xb1, 0x2b,
					0xb6, 0x9e, 0x97, 0xf0, 0xe5, 0x21, 0xfa, 0xe7, 0x18, 0xe7, 0xb6, 0x93, 0x9f, 0x59, 0xb, 0x57,
				},
				Stride: 4,
				Rect:   image.Rectangle{Min: image.Point{X: 0, Y: 0}, Max: image.Point{X: 1, Y: 8}},
			},
			cutoff: [2]float64{0.1, 0.9},
			gamma:  0.5,
			expectedImg: &image.RGBA{
				Pix: []uint8{
					0x7d, 0x9d, 0x3d, 0x88, 0xf5, 0xce, 0xf9, 0x55, 0x4, 0x6a, 0x85, 0x7f, 0x44, 0x85, 0xcb, 0x2b,
					0xd6, 0xb8, 0xb7, 0xf0, 0xff, 0x0, 0xfe, 0xe7, 0x0, 0xfe, 0xcf, 0x93, 0xc0, 0x63, 0x0, 0x57,
				},
				Stride: 4,
				Rect:   image.Rectangle{Min: image.Point{X: 0, Y: 0}, Max: image.Point{X: 1, Y: 8}},
			},
		},
		{
			name: "High gamma, no contrast",
			inputImg: &image.RGBA{
				Pix: []uint8{
					0x56, 0x6d, 0x9c, 0x72, 0x32, 0xf1, 0xe1, 0x95, 0xef, 0xf4, 0xc, 0xb0, 0x10, 0x78, 0xc5, 0xbb,
					0x9, 0x7a, 0x1a, 0x89, 0xcb, 0x71, 0x76, 0x4f, 0xc3, 0x74, 0x23, 0xc6, 0x82, 0xa5, 0xd0, 0x55,
					0x4f, 0x35, 0x72, 0xdf, 0x43, 0x1c, 0x4d, 0x96, 0x9c, 0x36, 0x72, 0x73, 0x5a, 0x88, 0x71, 0x6e,
					0x1f, 0x98, 0xa3, 0x8c, 0xc7, 0x7e, 0x82, 0x31, 0x89, 0xa, 0x57, 0x3, 0xdf, 0x4, 0x19, 0x4b,
				},
				Stride: 16, Rect: image.Rectangle{Min: image.Point{X: 0, Y: 0}, Max: image.Point{X: 4, Y: 4}},
			},
			cutoff: [2]float64{0.1, 0.9},
			gamma:  2.0,
			expectedImg: &image.RGBA{
				Pix: []uint8{
					0x21, 0x32, 0x7a, 0x72, 0xa, 0xf8, 0xff, 0x95, 0xff, 0xfe, 0x0, 0xb0, 0x1, 0x3d, 0xc3, 0xbb, 0x0,
					0x3f, 0x2, 0x89, 0xb7, 0x36, 0x45, 0x4f, 0xa9, 0x38, 0x5, 0xc6, 0x4b, 0x74, 0xd9, 0x55, 0x1b, 0xc,
					0x40, 0xdf, 0x13, 0x3, 0x1d, 0x96, 0x6c, 0xc, 0x40, 0x73, 0x23, 0x4e, 0x40, 0x6e, 0x3, 0x62, 0x85,
					0x8c, 0xb0, 0x43, 0x55, 0x31, 0x53, 0x0, 0x25, 0x3, 0xdd, 0x0, 0x2, 0x4b,
				},
				Stride: 16, Rect: image.Rectangle{Min: image.Point{X: 0, Y: 0}, Max: image.Point{X: 4, Y: 4}},
			},
		},
		{
			name: "Auto-contrast with low gamma",
			inputImg: &image.RGBA{
				Pix: []uint8{
					0xec, 0x9a, 0xc2, 0x43, 0xf2, 0x9c, 0x8d, 0x71, 0x24, 0xff, 0x7e, 0x2c, 0xed, 0x69, 0xf7, 0x5a,
					0x62, 0x77, 0xc, 0x61, 0xec, 0xb0, 0x57, 0x26, 0xbc, 0xaf, 0xef, 0x6, 0xb3, 0x3e, 0x12, 0x0,
					0x0, 0xc9, 0x4f, 0x9b, 0x28, 0x4a, 0xfa, 0xf3, 0x6c, 0x19, 0x46, 0x81, 0xb6, 0xcb, 0xb8, 0xd1,
					0x86, 0x1e, 0xb2, 0xae, 0x71, 0xa5, 0x8d, 0xbc, 0x95, 0x78, 0x16, 0x10,
				},
				Stride: 20, Rect: image.Rectangle{Min: image.Point{X: 0, Y: 0}, Max: image.Point{X: 5, Y: 3}},
			},
			cutoff: [2]float64{0, 1},
			gamma:  0.1,
			expectedImg: &image.RGBA{
				Pix: []uint8{
					0xff, 0xc0, 0xe8, 0x43, 0xff, 0xc0, 0xc9, 0x71, 0xd2, 0xff, 0xbe, 0x2c, 0xff, 0x95, 0xff, 0x5a,
					0xe8, 0xa3, 0x0, 0x61, 0xff, 0xce, 0x9f, 0x26, 0xf8, 0xce, 0xfb, 0x6, 0xf7, 0x5b, 0x1e, 0x0, 0x0,
					0xe2, 0x94, 0x9b, 0xd4, 0x6e, 0xff, 0xf3, 0xeb, 0x0, 0x8c, 0x81, 0xf7, 0xe2, 0xe0, 0xd1, 0xf0, 0xe,
					0xdc, 0xae, 0xec, 0xca, 0xc9, 0xbc, 0xf2, 0xa3, 0x2d, 0x10,
				},
				Stride: 20, Rect: image.Rectangle{Min: image.Point{X: 0, Y: 0}, Max: image.Point{X: 5, Y: 3}},
			},
		},
	}

	for _, tCase := range testCases {
		t.Run(tCase.name, func(t *testing.T) {
			step := NewStepAutoContrast(tCase.cutoff[0], tCase.cutoff[1])
			var (
				state = pipeState{img: tCase.inputImg}
				opts  processOptions
			)

			opts.gamma = tCase.gamma
			if err := step.PerformExec(&state, opts); err != nil {
				t.Fatalf("PerformExec: %v", err.Error())
			}

			result := state.img
			if !imgutils.IsImageEqual(result, tCase.expectedImg) {
				t.Errorf(
					"expected: %#v, actual: %#v", tCase.expectedImg, result,
				)
			}
		})
	}
}
